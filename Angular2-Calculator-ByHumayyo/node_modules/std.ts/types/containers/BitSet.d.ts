/**
 * A representation of a BitSet. It works as an array of booleans by handling
 * the bits of the integers. When the quantity of bits is greater than 32, it
 * opens another position in the array.
 */
export declare class BitSet {
    private _buffer;
    private _numOn;
    private _size;
    /**
     * Builds this with a default array size of 1, that means 32 bits.
     * @param size The size for this.
     * @param buffer A buffer previously set if it is required.
     */
    constructor(size?: number, buffer?: ArrayBuffer);
    /**
     * Gets the bit value at i.
     * @param i The bit to get.
     * @return this[i].
     */
    get(i: number): boolean;
    /**
     * Sets the bit at i position to a given value.
     * @param i The bit to be set.
     * @param value The value for the bit.
     */
    set(i: number, value: boolean): void;
    /**
     * Sets all bit in this to a given value.
     * @param value The new value for all bits in this.
     */
    setAll(value: boolean): void;
    /**
     * Sets the bits of this BitSet as the bits of a given buffer.
     * @param buffer The buffer to copy in this BitSet.
     * @param size The size of the buffer.
     */
    setFromBuffer(buffer: ArrayBuffer, size: number): void;
    /**
     * Clones this BitSet.
     * @return A copy of this BitSet.
     */
    clone(): BitSet;
    /**
     * Returns whether any of the bits is set.
     * @return true if there is any bit on in this, false otherwise.
     */
    any(): boolean;
    /**
     * Returns whether all of the bits are set.
     * @return true if all the bits are set, false otherwise.
     */
    all(): boolean;
    /**
     * Returns whether none of the bits is set.
     * @return true if none of the bits in the BitSet is set, false
     * otherwise.
     */
    none(): boolean;
    /**
     * Returns the size of the BitSet.
     * @return The size of this BitSet.
     */
    /**
     * Sets the size of this BitSet to a given size.
     * @param size The new size for this BitSet.
     */
    size: number;
    /**
     * Returns the buffer containing the bits on this BitSet.
     * @return An array of integers.
     */
    readonly buffer: ArrayBuffer;
    /**
     * Returns the number of bits set in the BitSet.
     * @return The number of bits on in this BitSet.
     */
    readonly numOn: number;
    /**
     * Returns the number of bits unset in the BitSet.
     * @return The number of bits off in this BitSet.
     */
    readonly numOff: number;
}
